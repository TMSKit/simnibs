.. _file_formats:

File Formats in SimNIBS
=========================

Head Models
------------

SimNIBS' head models are **meshes** (*.msh* files).
This means that the head head is represented as a set of *Nodes* and *Elements*.

    * The *Nodes* are points located in the 3-dimensional volume.
    * The *Elements* are triangles and tetrahedra. They are defined using 3 nodes (triangles) or 4 nodes (tetrahedra).

This type of format is highly advantageous for Finite Element (FEM) calculations, especially for complex geometries such as the human head.

Head Meshes are stored in **binary gmsh version 2 format**, as described in the `Gmsh documentation <http://gmsh.info/doc/texinfo/gmsh.html#MSH-file-format-version-2>`_.
SimNIBS can read arbitrary mesh files.
But it can't write files with elements other then first order triangles and tetrahedra.

SimNIBS offers the *Python* :func:`simnibs.msh.read_msh` function and the
*MATLAB* function *mesh_load_gmsh4* to read *.msh* files.

TMS Coils
---------
Definitions of TMS coils can be stored in a number of different file formats:

  * Dipole files (.ccd) which store the position and magnitude of dipoles 
  * Files in the NiftI format (.nii | .nii.gz) which store sampled values of the magnetic vector potential (A-field) on a grid
  * A combined TMS coil definition file format (.tcd) which can store dipole elements, line segments and a sampled magnetic vector potential (A-field) on a grid. This format also allows for flexible or moveable coil components.

TMS Coil Definition File Format (.tcd)
''''''''''''''''''''''''''''''''''''''
The TMS Coil Definition File Format (.tcd) is a JSON-based format that defines a singular TMS coil. The coil file can be loaded into SimNIBS and used to calculate the magnetic vector potential (A-field) and the magnetic field (B-field) in space resulting from a time-varying current in the coil.

The file format holds basic information about the coil, the name, the brand and the version of the coil file. 

For visualization and optimization purposes, the file format contains a list of coil casing triangulated surfaces ("coilModels"). Each coil casing surface has a text description, a point list and a list of faces which are indices into the point list. Additionally, a list of points ("minDistancePoints") representing the parts of the coil that are supposed to be close to the head can be stored, these are then used for optimization purposes. The point and faces lists are stored as plain text or as Base64 encoded binary.

A list of TMS stimulators ("stimulatorList") is stored to connect different stimulating coil elements to the same stimulator, which can be used in multi-stimulator coil settings. The TMS stimulators are described by their name, brand, maximum dI/dt in A/s and a list of waveforms.

The main part of the file format is a list of stimulating coil elements, a list of deformations ("deformList") and a list of deformation ranges ("deformRangeList"). Each stimulating coil element can use one of three types of stimulating elements. Dipoles, which are described by their location, direction and magnitude, line elements, which are defined by their starting position, direction and magnitude or a sampled A-field grid which is described by the A field value at each grid location and an affine transformation matrix. In addition, each stimulating coil element has a name, is connected to one stimulator from the list of stimulators, has an element casing from the list of element casings and is associated with a list of deformations from the general list of deformations that are applied to this coil element. The deformations are applied in the order that they are stored in and each deformation can be applied to multiple stimulating coil elements. A deformation has a text description and is either defined as a translation in the x, y, or z direction or as a rotation around an axis defined by two points. The limits for these deformations are defined as one of the deformation ranges from the general list of deformation ranges. This way, multiple deformations, for example, rotations around different axes, can use the same parameter range.  These ranges are defined by a text description, a minimum and maximum value and an initial value in-between minimum and maximum. These three components allow for definitions of static coils and coils with one or multiple movable stimulating elements. 

To complete the definition of a coil, the file format stores information to sample the fields generated by the coil in the form of axis limits ("limits") and resolution ("resolution"), the possibility for a global coil casing ("coilCasing") that isn't associated with a stimulating element and a list of groups of stimulating coil elements ("selfIntersectionTest") which will be tested for self-intersections in cases of optimization. 

Examples on how to create TMS coil definitions in the tcd file format can be found under :file:`simnibs/examples/coils`.
The JSON schema to validate tcd files can be found under :file:`simnibs/resources/coil_models/coil_model.schema.json`.


Simulation Results
----------------------

By default, Simulation results are also stored in *Gmsh* format.
There are 2 types of fields used in SimNIBS:

    * *NodeData* is defined at each nodes. By default, only the electric potential "v" is stored as *NodeData*

    * *ElementData* is defined for each element. This is the format of choice for the electric field, current density and their respective magnitudes.

The choice of format for each field is due to how the Finite Element Method works.
After the FEM calculations, we obtain values of "v" at each node.
To obtain the electric field and the current density, we take the gradient of the potential.
However, the gradient operation is defined element-wise, and not node-wise.

Together with the *.msh* files, we often also save *.opt* files to facilitate visualization.

Surface Fields
---------------

When fields are mapped to the middle gray matter surface, either on the subject or on the  *FsAverage*, it saves results as a *FreeSurfer* *.curv* file, which contains values for each point in the surface. SimNIBS has the *mesh_load_fsresults* *MATLAB* function and the :func:`simnibs.msh.read_curv` *Python* function to load this kind of file.

The surfaces themselves are stored as GIFTI files in :file:`m2m_{subID}/surfaces/`. They can be read using *mesh_load_fssurf* in *MATLAB* and :func:`simnibs.msh.read_gifti_surface` in *Python*.


Volumes
--------

Fields mapped to subject or MNI volumes are stored in NiftI format.

HDF5
----

SimNIBS uses `HDF5 <https://www.hdfgroup.org/solutions/hdf5/>`_ to store large data sets, such as for uncertainty quantification (UQ) and leadfields.
The HDF5 format is hierarchical, meaning that is acts almost as a folder structure.

