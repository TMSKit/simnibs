variables:
  Agent.Source.Git.ShallowFetchDepth: 5

trigger:
- master

jobs:
- job: Build
  pool:
    vmImage: 'windows-2019'

  steps:
  - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
    displayName: Add conda to PATH

  - script: |
      conda env create -f environment_win.yml
    displayName: Create Conda environment

  - script: |
      call activate simnibs_env
      python -m pip wheel . -w dist  --no-deps --use-feature=in-tree-build
      pip install jinja2 conda-pack
      python packing\pack.py dist\
      copy dist\* $(Build.ArtifactStagingDirectory)
      copy environment_win.yml $(Build.ArtifactStagingDirectory)
      cp simnibs_installer_windows.exe  $(Build.ArtifactStagingDirectory)
    displayName: Build SimNIBS

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: windows
    displayName: Publish Artifact

# Now we test the previously build wheels on different windows versions

- job: Test
  dependsOn: Build
  strategy:
    matrix:
      Windows-2019:
        vmImage: 'windows-2019'
      Windows-2022:
         vmImage: 'windows-2022'

  pool:
    vmImage: $(vmImage)
    maxParallel: 4

  steps:
  - checkout: none
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'windows'
      downloadPath: '$(System.ArtifactsDirectory)'
    displayName: Download Installer

  - script: |
      start /wait $(System.ArtifactsDirectory)\windows\simnibs_installer_windows.exe /S /D=%cd%\simnibs_install
      simnibs_install\bin\simnibs_python -m pytest simnibs_install\simnibs_env\lib\site-packages\simnibs\ --junit-xml=test-results.xml
    displayName: Install SimNIBS and run unit tests

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: 'test-results.xml'
      testRunTitle: 'Unit Tests'

- job: Examples
  dependsOn: Build
  timeoutInMinutes: 0 # Maximum time (should be 6 hours)
  pool:
    vmImage: 'windows-2019'

  steps:
  - checkout: none
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'windows'
      downloadPath: '$(System.ArtifactsDirectory)'
    displayName: Download Installer

  - bash: |
      choco install octave.install --version=5.1.0
    displayName: Install Octave

  - script: |
      start /wait $(System.ArtifactsDirectory)\windows\simnibs_installer_windows.exe /S /D=%cd%\simnibs_install
      simnibs_install\bin\simnibs_python -m pytest simnibs_install\simnibs_env\lib\site-packages\simnibs\examples\tests\examples.py -v -s --junit-xml=test-results.xml
    displayName: Install SimNIBS and run tests

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: 'test-results.xml'
      testRunTitle: 'Example Tests'

# If everything went fine, we upload the new version as a draft to GitHub
- job: Release
#  dependsOn: Build
  dependsOn:
   - Test
   - Examples
  pool:
    vmImage: 'windows-2019'

  steps:
  - checkout: none
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'windows'
      downloadPath: '$(System.ArtifactsDirectory)'
    displayName: Download Wheel

  - task: GithubRelease@0
    displayName: Edit GitHub Release
    inputs: 
      gitHubConnection: oulap # I use my connection because github does not generate OAuth token for organizations
      repositoryName: simnibs/simnibs
      action: edit
      tag: dev
      assets: $(System.ArtifactsDirectory)\windows\*
      assetUploadMode: 'replace'
      isDraft: true



