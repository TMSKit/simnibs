variables:
  Agent.Source.Git.ShallowFetchDepth: 5

trigger:
- master


# Build SimNIBS on a Centos 7 container
jobs:
- job: Build
  pool:
     vmImage: 'ubuntu-20.04'
     
  container: simnibs/simnibs-testing:latest
  steps:
  - bash: |
      conda update -y conda
      conda env create -f environment_linux.yml
    displayName: Create Conda environment

  - bash: |
      gcc -v
      source activate simnibs_env
      python -m pip wheel . -w ./dist  --no-deps --use-feature=in-tree-build
      pip install jinja2 conda-pack
      python packing/pack.py dist/
      cp dist/* $(Build.ArtifactStagingDirectory)
      cp environment_linux.yml $(Build.ArtifactStagingDirectory)
      cp simnibs_installer_linux.tar.gz  $(Build.ArtifactStagingDirectory)
    displayName: Build SimNIBS

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: linux
    displayName: Publish Artifact

# Test SimNIBS in a series of containers
- job: Test
  dependsOn: Build
  strategy:
    matrix:
      centos7:
        containerImage: centos:7
      ubuntu20:
        containerImage: ubuntu:20.04
      ubuntu22:
        containerImage: ubuntu:22.04
  pool:
    vmImage: 'ubuntu-20.04'
    maxParallel: 4

  container:  $[ variables['containerImage'] ]

  steps:
  - checkout: none
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'linux'
      downloadPath: '$(System.ArtifactsDirectory)'
    displayName: Download SimNIBS

  - bash: |
      tar -zxf $(System.ArtifactsDirectory)/linux/simnibs_installer_linux.tar.gz -C .
      simnibs_installer/install -s -t simnibs_install
      simnibs_install/bin/simnibs_python -m pytest simnibs_install/simnibs_env/lib/python*/site-packages/simnibs/ --junit-xml=test-results.xml
    displayName: Install SimNIBS and run unit tests
  
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: 'test-results.xml'
      testRunTitle: 'Unit Tests'

- job: Examples
  dependsOn: Build
  timeoutInMinutes: 0 # Maximum time (should be 6 hours)
  pool:
    vmImage: 'ubuntu-20.04'

  steps:
  - checkout: none

  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'linux'
      downloadPath: '$(System.ArtifactsDirectory)'
    displayName: Download SimNIBS

  - bash: |
      sudo apt-get update
      sudo apt-get install -y octave
      octave -v
    displayName: Install Octave

  - bash: |
      tar -zxf $(System.ArtifactsDirectory)/linux/simnibs_installer_linux.tar.gz -C .
      simnibs_installer/install -s -t simnibs_install
      simnibs_install/bin/simnibs_python -m pip install --force-reinstall --upgrade certifi
      simnibs_install/bin/simnibs_python -m pytest simnibs_install/simnibs_env/lib/python*/site-packages/simnibs/examples/tests/examples.py -v -s --junit-xml=test-results.xml
    displayName: Install SimNIBS and run tests
 
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: 'test-results.xml'
      testRunTitle: 'Example Tests'

# If everything went fine, we upload the new version as a draft to GitHub
- job: Release
  dependsOn:
    - Test
    - Examples
#  dependsOn: Build
  
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - checkout: none
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'linux'
      downloadPath: '$(System.ArtifactsDirectory)'
    displayName: Download SimNIBS version

  - task: GithubRelease@0
    displayName: Edit GitHub Release
    inputs: 
      gitHubConnection: oulap # I use my connection because github does not generate OAuth token for organizations
      repositoryName: simnibs/simnibs
      action: edit
      tag: dev
      assets: $(System.ArtifactsDirectory)/linux/*
      assetUploadMode: 'replace'
      isDraft: true

